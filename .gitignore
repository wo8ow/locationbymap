function asignarBarrios() {
  const hoja = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("des_cartilla_salud"); // Ajusta si tu hoja tiene otro nombre
  const datos = hoja.getDataRange().getValues();
  
  const geojsonFile = DriveApp.getFilesByName("barrios.geojson").next();
  const geojson = JSON.parse(geojsonFile.getBlob().getDataAsString());

  for (let i = 1; i < datos.length; i++) {
    const localizacion = datos[i][4]; // Columna E: LOCALIZACION
    const barrioActual = datos[i][5]; // Columna F: BARRIO
    
    if (!localizacion || barrioActual) continue; // Salta si no hay coordenadas o ya tiene barrio

    const [latRaw, lonRaw] = localizacion.split(",");
    const lat = parseFloat(latRaw.trim());
    const lon = parseFloat(lonRaw.trim());
    
    if (isNaN(lat) || isNaN(lon)) continue;
    const punto = [lon, lat];  // el orden correcto

    for (let feature of geojson.features) {
      const coords = feature.geometry.coordinates;

      // Solo tomamos el primer anillo (sin hoyos interiores) y suponemos tipo Polygon
     if (feature.geometry.type === "Polygon") {
      if (pointInPolygon([lon, lat], coords[0])) {
        hoja.getRange(i + 1, 6).setValue(feature.properties.nombre);
      break;
      }
    } else if (feature.geometry.type === "MultiPolygon") {
      for (let poly of coords) {
        if (pointInPolygon([lon, lat], poly[0])) {
          hoja.getRange(i + 1, 6).setValue(feature.properties.nombre);
          break;
        }
      }
    }

    }
  }
}

// Algoritmo ray-casting para saber si un punto está en un polígono
function pointInPolygon(point, vs) {
  const x = point[0], y = point[1];
  let inside = false;

  for (let i = 0, j = vs.length - 1; i < vs.length; j = i++) {
    const xi = vs[i][0], yi = vs[i][1];
    const xj = vs[j][0], yj = vs[j][1];

    const intersect = ((yi > y) !== (yj > y)) &&
      (x < (xj - xi) * (y - yi) / ((yj - yi) + 0.000000001) + xi);
    if (intersect) inside = !inside;
  }

  return inside;
}
